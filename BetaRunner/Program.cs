
using DataMock;
using Raspil;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;
using System.IO;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using System.Net.Sockets;
using System.Net;

namespace BetaRunner
{

	class Program
	{
        [DllImport("kernel32.dll")]
        static extern IntPtr GetConsoleWindow();

        [DllImport("user32.dll")]
        static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        const int SW_HIDE = 0;
        const int SW_SHOW = 5;
        static void Main(string[] args)
		{
            Runner2(args);
        }

       
        /// <summary>
        /// 
        /// </summary>
        /// <param name="args"></param>
        private static void Runner2(string[] args)
        {
            try
            {
                var server = new RaspilServer(int.Parse(args[0]), int.Parse(args[1]));
                server.runServer();
            } catch
            {
                try
                {
                    var server = new RaspilServer(int.Parse(args[0]));
                    server.runServer();
                } catch
                {
                    var x = FreeTcpPort();
                    Console.WriteLine($"Порт - {x} \n Продолжить? ... (press any key)");
                    Console.ReadLine();
                    var server = new RaspilServer(x);
                    server.runServer();
                }
            }
        }

        private static void Runner1(string[] args)
        {
            if (args[0] == "3")
                prog3();
            if (args[0] == "2")
                prog2();
        }
        private static void prog1()
        {
            var handle = GetConsoleWindow();

            // Hide
            ShowWindow(handle, SW_HIDE);



            var (orders, store) = Data.autoGeneratedData(30, 60, 5);
            var (x, y) = JsonPack.packGeneratedData(orders, store);

            int[][] str = JArray.Parse(File.ReadAllText(y)).Select(jv => jv.Select(j => (int)j).ToArray()).ToArray();
            int[][] or = JArray.Parse(File.ReadAllText(x)).Select(jv => jv.Select(j => (int)j).ToArray()).ToArray();

            var raspil = new RaspilOperator(or, str);
            var x1 = raspil.Algoritm2();
            var xx = raspil.Orders;

            string x11 = JsonConvert.SerializeObject(x1);
            string xx11 = JsonConvert.SerializeObject(xx);

            File.WriteAllText(Path.Combine(Directory.GetCurrentDirectory(), "res.json"), x11);
            File.WriteAllText(Path.Combine(Directory.GetCurrentDirectory(), "ostatok.json"), xx11);
        }
        
        private static void prog2()
        {
            var handle = GetConsoleWindow();

            // Hide
            ShowWindow(handle, SW_HIDE);
            var rs = new RaspilServer(FreeTcpPort());

            Console.WriteLine("Port " + rs.Port);

            rs.runServer();
        }

        private static void prog3()
        {
            var ipPoint = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 56777);

            var ss = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            Console.WriteLine("Port number:");
            ss.Connect(new IPEndPoint(IPAddress.Parse("127.0.0.1"), Int32.Parse(Console.ReadLine())));

            // получаем сообщение
            StringBuilder builder = new StringBuilder();
            int bytes = 0; // количество полученных байтов
            byte[] data = new byte[256]; // буфер для получаемых данных

            do
            {
                Console.WriteLine(ss.Available);
                bytes = ss.Receive(data);
                builder.Append(Encoding.Unicode.GetString(data, 0, bytes));
            } while (ss.Available > 0);

            Console.WriteLine(DateTime.Now.ToShortTimeString() + ": " + builder.ToString());
            Console.Read();
        }

        private static int FreeTcpPort()
        {
            TcpListener l = new TcpListener(IPAddress.Loopback, 0);
            l.Start();
            int port = ((IPEndPoint)l.LocalEndpoint).Port;
            l.Stop();
            return port;
        }

    }
}
