
using DataMock;
using Raspil;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;
using System.IO;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using System.Net.Sockets;
using System.Net;

namespace ServerRunner
{

	class Program
	{
        [DllImport("kernel32.dll")]
        static extern IntPtr GetConsoleWindow();

        [DllImport("user32.dll")]
        static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        const int SW_HIDE = 0;
        const int SW_SHOW = 5;
        static void Main(string[] args)
		{
            Runner(args);
        }

       
        /// <summary>
        /// 
        /// </summary>
        /// <param name="args"></param>
        private static void Runner2()
        {

            var server = new RaspilServer("49770");

            server.RunServer();
        }

        private static void Runner(string[] args)
        {
            RaspilServer server;
            try
            {
                server = new RaspilServer(args[0]);

            } catch
            {
                server = new RaspilServer("49770");
            }
            try
            {
                if (args[1] == "hide")
                {
                    var win = GetConsoleWindow();
                    ShowWindow(win, SW_HIDE);
                }

            }
            catch { }

            server.RunServer();
        }
        private static void prog1()
        {
            //var handle = GetConsoleWindow();

            // Hide
            //ShowWindow(handle, SW_HIDE);


            // сохраним на диск
            var (orders, store) = Data.autoGeneratedData(30, 60, 5, false, true);
            var data = JsonPack.packGeneratedData(orders, store);
            // прочитали Json
            dynamic dd = JObject.Parse(File.ReadAllText(data));
            int[][] str = ((JArray)dd.store).Select(jv => jv.Select(j => (int)j).ToArray()).ToArray();
            // возможно вставка нумерации строк
            int[][] or = ((JArray)dd.order).Select(jv => jv.Select(j => (int)j).ToArray()).ToArray();
            int x = 1;
            or = or.Select(el => { var el1 = el.ToList(); el1.Add(x++); return el1.ToArray(); }).ToArray();
            //int[][] or = JArray.Parse(File.ReadAllText(x)).Select(jv => jv.Select(j => (int)j).ToArray()).ToArray();
            var newData = File.ReadAllText(JsonPack.packGeneratedData(or, str));
            Console.WriteLine(newData);
            prog3(newData);

            // проводим расчет
            var raspil = new RaspilOperator(or, str);
            var x1 = raspil.Algoritm2();
            var xx = raspil.Orders;

            string x11 = JsonConvert.SerializeObject(x1);
            string xx11 = JsonConvert.SerializeObject(xx);

            File.WriteAllText(Path.Combine("temp", Directory.GetCurrentDirectory(), "result.json"), x11);
            File.WriteAllText(Path.Combine("temp", Directory.GetCurrentDirectory(), "ostatok.json"), xx11);
        }
        
        private static void prog2()
        {
            var handle = GetConsoleWindow();

            // Hide
            ShowWindow(handle, SW_HIDE);
            var rs = new RaspilServer(FreeTcpPort().ToString());

           

            rs.RunServer();
        }

        private static void prog3(string data)
        {
            

            var ss = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            Console.WriteLine("Port number:");
            ss.Connect(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 49770));

            ss.Send(Encoding.UTF8.GetBytes(data));
            // получаем сообщение
            StringBuilder builder = new StringBuilder();
            int bytes = 0; // количество полученных байтов
            byte[] stream = new byte[256]; // буфер для получаемых данных

            do
            {
                Console.WriteLine(ss.Available);
                bytes = ss.Receive(stream);
                builder.Append(Encoding.UTF8.GetString(stream, 0, bytes));
            } while (ss.Available > 0);

            Console.WriteLine(DateTime.Now.ToShortTimeString() + ": " + builder.ToString());
            File.WriteAllText(Path.Combine(Directory.GetCurrentDirectory(), "outFromServer.json"),builder.ToString());
            if('W' == builder.ToString()[0])
            {
                do
                {
                    Console.WriteLine(ss.Available);
                    bytes = ss.Receive(stream);
                    builder.Append(Encoding.UTF8.GetString(stream, 0, bytes));
                } while (ss.Available > 0);

                Console.WriteLine(DateTime.Now.ToShortTimeString() + ": " + builder.ToString());
                File.WriteAllText(Path.Combine(Directory.GetCurrentDirectory(), "outFromServer.json"), $"{DateTime.Now.ToShortTimeString()} : {builder.ToString()} \n");
            }
            Console.Read();
        }

        private static int FreeTcpPort()
        {
            TcpListener l = new TcpListener(IPAddress.Loopback, 0);
            l.Start();
            int port = ((IPEndPoint)l.LocalEndpoint).Port;
            l.Stop();
            return port;
        }

    }
}
